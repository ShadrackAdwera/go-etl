// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: match.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMatchData = `-- name: CreateMatchData :one
INSERT INTO match_data (
    home_scored, 
    away_scored, 
    home_team, 
    away_team,
    match_date,
    referee,
    winner,
    season,
    created_by_id,
    file_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, home_scored, away_scored, home_team, away_team, match_date, referee, winner, season, created_at, created_by_id, file_id
`

type CreateMatchDataParams struct {
	HomeScored  int32     `json:"home_scored"`
	AwayScored  int32     `json:"away_scored"`
	HomeTeam    string    `json:"home_team"`
	AwayTeam    string    `json:"away_team"`
	MatchDate   time.Time `json:"match_date"`
	Referee     string    `json:"referee"`
	Winner      string    `json:"winner"`
	Season      string    `json:"season"`
	CreatedByID int64     `json:"created_by_id"`
	FileID      int64     `json:"file_id"`
}

func (q *Queries) CreateMatchData(ctx context.Context, arg CreateMatchDataParams) (MatchDatum, error) {
	row := q.db.QueryRowContext(ctx, createMatchData,
		arg.HomeScored,
		arg.AwayScored,
		arg.HomeTeam,
		arg.AwayTeam,
		arg.MatchDate,
		arg.Referee,
		arg.Winner,
		arg.Season,
		arg.CreatedByID,
		arg.FileID,
	)
	var i MatchDatum
	err := row.Scan(
		&i.ID,
		&i.HomeScored,
		&i.AwayScored,
		&i.HomeTeam,
		&i.AwayTeam,
		&i.MatchDate,
		&i.Referee,
		&i.Winner,
		&i.Season,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.FileID,
	)
	return i, err
}

const deleteMatchData = `-- name: DeleteMatchData :exec
DELETE FROM 
match_data 
WHERE id = $1
`

func (q *Queries) DeleteMatchData(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMatchData, id)
	return err
}

const getMatchData = `-- name: GetMatchData :many
SELECT id, home_scored, away_scored, home_team, away_team, match_date, referee, winner, season, created_at, created_by_id, file_id 
FROM match_data
WHERE created_by_id = $1
`

func (q *Queries) GetMatchData(ctx context.Context, createdByID int64) ([]MatchDatum, error) {
	rows, err := q.db.QueryContext(ctx, getMatchData, createdByID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MatchDatum
	for rows.Next() {
		var i MatchDatum
		if err := rows.Scan(
			&i.ID,
			&i.HomeScored,
			&i.AwayScored,
			&i.HomeTeam,
			&i.AwayTeam,
			&i.MatchDate,
			&i.Referee,
			&i.Winner,
			&i.Season,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.FileID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMatchDataById = `-- name: GetMatchDataById :one
SELECT id, home_scored, away_scored, home_team, away_team, match_date, referee, winner, season, created_at, created_by_id, file_id 
FROM match_data
WHERE id = $1
`

func (q *Queries) GetMatchDataById(ctx context.Context, id int64) (MatchDatum, error) {
	row := q.db.QueryRowContext(ctx, getMatchDataById, id)
	var i MatchDatum
	err := row.Scan(
		&i.ID,
		&i.HomeScored,
		&i.AwayScored,
		&i.HomeTeam,
		&i.AwayTeam,
		&i.MatchDate,
		&i.Referee,
		&i.Winner,
		&i.Season,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.FileID,
	)
	return i, err
}

const updateMatchData = `-- name: UpdateMatchData :one
UPDATE match_data 
SET
  home_scored = COALESCE($1,home_scored),
  away_scored = COALESCE($2,away_scored),
  home_team = COALESCE($3,home_team),
  away_team = COALESCE($4,away_team),
  match_date = COALESCE($5,match_date),
  referee = COALESCE($6,referee),
  winner = COALESCE($7,winner),
  season = COALESCE($8,season),
  file_id = COALESCE($9,file_id)
WHERE id = $10
RETURNING id, home_scored, away_scored, home_team, away_team, match_date, referee, winner, season, created_at, created_by_id, file_id
`

type UpdateMatchDataParams struct {
	HomeScored sql.NullInt32  `json:"home_scored"`
	AwayScored sql.NullInt32  `json:"away_scored"`
	HomeTeam   sql.NullString `json:"home_team"`
	AwayTeam   sql.NullString `json:"away_team"`
	MatchDate  sql.NullTime   `json:"match_date"`
	Referee    sql.NullString `json:"referee"`
	Winner     sql.NullString `json:"winner"`
	Season     sql.NullString `json:"season"`
	FileID     sql.NullInt64  `json:"file_id"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateMatchData(ctx context.Context, arg UpdateMatchDataParams) (MatchDatum, error) {
	row := q.db.QueryRowContext(ctx, updateMatchData,
		arg.HomeScored,
		arg.AwayScored,
		arg.HomeTeam,
		arg.AwayTeam,
		arg.MatchDate,
		arg.Referee,
		arg.Winner,
		arg.Season,
		arg.FileID,
		arg.ID,
	)
	var i MatchDatum
	err := row.Scan(
		&i.ID,
		&i.HomeScored,
		&i.AwayScored,
		&i.HomeTeam,
		&i.AwayTeam,
		&i.MatchDate,
		&i.Referee,
		&i.Winner,
		&i.Season,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.FileID,
	)
	return i, err
}
