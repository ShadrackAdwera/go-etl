// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: files.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files ( 
    file_url, 
    created_by_id
) VALUES (
  $1, $2
)
RETURNING id, file_url, created_at, created_by_id
`

type CreateFileParams struct {
	FileUrl     string `json:"file_url"`
	CreatedByID int64  `json:"created_by_id"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile, arg.FileUrl, arg.CreatedByID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.CreatedByID,
	)
	return i, err
}

const getFiles = `-- name: GetFiles :many
SELECT id, file_url, created_at, created_by_id 
FROM files
WHERE created_by_id = $1
`

func (q *Queries) GetFiles(ctx context.Context, createdByID int64) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFiles, createdByID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.CreatedByID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
